stages:
  data_ingestion:
    cmd: python -c "from src.cnnClassifier.pipeline.stage_01_data_ingestion import DataIngestionTrainingPipeline; data_ingestion = DataIngestionTrainingPipeline(); data_ingestion.main()"
    deps:
      - src/cnnClassifier/pipeline/stage_01_data_ingestion.py
      - config/config.yaml
    outs:
      - artifacts/data_ingestion/Chicken-fecal-images

  prepare_base_model:
    cmd: python -c "from src.cnnClassifier.pipeline.stage_02_prepare_base_model import PrepareBaseModelTrainingPipeline; prepare_base_model = PrepareBaseModelTrainingPipeline(); prepare_base_model.main()"
    deps:
      - src/cnnClassifier/pipeline/stage_02_prepare_base_model.py
      - config/config.yaml
    params:
      - IMAGE_SIZE
      - INCLUDE_TOP
      - CLASSES
      - WEIGHTS
      - LEARNING_RATE
    outs:
      - artifacts/prepare_base_model

  training:
    cmd: python -c "from src.cnnClassifier.pipeline.stage_03_training import ModelTrainingPipeline; model_trainer = ModelTrainingPipeline(); model_trainer.main()"
    deps:
      - src/cnnClassifier/pipeline/stage_03_training.py
      - src/cnnClassifier/components/prepare_callbacks.py
      - config/config.yaml
      - artifacts/data_ingestion/Chicken-fecal-images
      - artifacts/prepare_base_model
    params:
      - IMAGE_SIZE
      - EPOCHS
      - BATCH_SIZE
      - AUGMENTATION
    outs:
      - artifacts/training/model.h5

  evaluation:
    cmd: python -c "from src.cnnClassifier.pipeline.stage_04_evaluation import EvaluationPipeline; model_evaluation = EvaluationPipeline(); model_evaluation.main()"
    deps:
      - src/cnnClassifier/pipeline/stage_04_evaluation.py
      - config/config.yaml
      - artifacts/data_ingestion/Chicken-fecal-images
      - artifacts/training/model.h5
    params:
      - IMAGE_SIZE
      - BATCH_SIZE
    metrics:
      - scores.json:
          cache: false
